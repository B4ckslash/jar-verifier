/*
 * This source file was generated by the Gradle 'init' task
 */
package com.exedio;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class JdkClassReader {
    public static void main(String[] args) {
        final String modulePath = args[0];
        try {
            final Process jimage = new ProcessBuilder("jimage", "list", modulePath).start();
            final BufferedReader reader = new BufferedReader(new InputStreamReader(jimage.getInputStream()));
            final List<String> classes = reader.lines()
                    .map(String::trim)
                    .filter(line -> line.endsWith(".class") && line.startsWith("java"))
                    .map(line -> line.replace(".class", ""))
                    .toList();

            for (final String className : classes) {
                try {
                    System.out.println(className);
                    final Class<?> clazz = Class.forName(className.replace('/', '.'));
                    Arrays.stream(clazz.getDeclaredMethods())
                            .filter(method -> Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers()))
                            .map(m -> String.format("  %s", convertMethod(m)))
                            .forEach(System.out::println);
                } catch (ClassNotFoundException e) {
                    System.err.println("Class not found: " + className);
                }
            }
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }

    private static String convertMethod(final Method method) {
        final String name = method.getName();
        final String parameters = Arrays.stream(method.getParameterTypes())
                .map(JdkClassReader::mapType)
                .collect(Collectors.joining());
        final String returnType = mapType(method.getReturnType());
        return String.format("%s(%s)%s", name, parameters, returnType);
    }

    private static String mapType(final Class<?> type) {
        if (byte.class.equals(type)) {
            return "B";
        }
        if (char.class.equals(type)) {
            return "C";
        }
        if (double.class.equals(type)) {
            return "D";
        }
        if (float.class.equals(type)) {
            return "F";
        }
        if (int.class.equals(type)) {
            return "I";
        }
        if (long.class.equals(type)) {
            return "J";
        }
        if (short.class.equals(type)) {
            return "S";
        }
        if (boolean.class.equals(type)) {
            return "Z";
        }
        if (type.isArray()) {
            return type.getName();
        }
        return "L" + type.getName().replace('.', '/') + ";";
    }
}
